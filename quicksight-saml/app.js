'use strict';

const AWS = require('aws-sdk');
const querystring = require('querystring');
const parser = require('fast-xml-parser');
const axios = require('axios');

const sts = new AWS.STS;
const quicksight = new AWS.QuickSight;

exports.lambdaHandler = async (event, context) => {

    let body = event.body;

    // Decode the POST request
    if (event.isBase64Encoded) {
        body = Buffer.from(body, 'base64').toString();
    }

    body = querystring.decode(body);

    // Check if request contains a SAML response
    if (!body.SAMLResponse) {
        console.error('SAML response was not provided.');
        return { statusCode: 500 };
    }

    // SAML response is Base64-encoded and needs to be decoded first
    const saml = Buffer.from(body.SAMLResponse, 'base64').toString();

    // Validate the XML syntax of the SAML response
    if (parser.validate(saml) !== true) {
        console.error('SAML response is invalid XML.');
        return { statusCode: 500 };
    }

    // Parse the XML structure of the SAML response and convert to an object
    const samlObj = parser.parse(saml, {
        ignoreAttributes: false
    });

    // Default to QuickSight user role "READER"
    // in case the custom attribute is not found below
    let quicksightUserRole = 'READER';

    // Try to find the custom attribute "quicksightUserRole" in the SAML assertion
    // and use as QuickSight user role if found
    try {
        let filteredResult =
          samlObj['saml2p:Response']['saml2:Assertion']['saml2:AttributeStatement']['saml2:Attribute']
            .filter(attribute => attribute['@_Name'] === 'quicksightUserRole');

        if (filteredResult.length) {
            quicksightUserRole = filteredResult.shift()['saml2:AttributeValue']['#text'].trim();
        }
    } catch (e) {
        console.error('SAML response malformed.', e);
        return { statusCode: 500 };
    }

    let callerIdentity;

    // Obtain the current AWS account ID as it is needed for requests to AWS service APIs later
    try {
        callerIdentity = await sts.getCallerIdentity().promise();
    } catch (e) {
        console.error('Caller identity could not be obtained.', e);
        return { statusCode: 500 };
    }

    const awsAccountId = callerIdentity.Account;

    let assumedRole;

    // Assume the QuickSight IAM role through SAML response
    try {
        assumedRole = await sts.assumeRoleWithSAML({
            RoleArn: `arn:aws:iam::${awsAccountId}:role/${process.env.QUICKSIGHT_IAM_ROLE_NAME}`,
            PrincipalArn: process.env.IDENTITY_PROVIDER_ARN,
            SAMLAssertion: body.SAMLResponse
        }).promise();
    } catch (e) {
        console.error('Role could not be assumed with SAML response.', e);
        return { statusCode: 500 };
    }

    // Build federated user name: IAMRoleName/email@example.org
    const federatedUserName = process.env.QUICKSIGHT_IAM_ROLE_NAME + '/' + assumedRole.Subject;

    let userExists = true;

    // Check if the QuickSight user already exists
    try {
        await quicksight.describeUser({
            UserName: federatedUserName,
            Namespace: 'default',
            AwsAccountId: awsAccountId
        }).promise();
    } catch (e) {
        if (e.code === 'ResourceNotFoundException') {
            console.info(`QuickSight user "${federatedUserName}" not found. Registering new user.`);
            userExists = false;
        } else {
            console.error(`Describing QuickSight user "${federatedUserName}" failed.`, e);
        }
    }

    // If the QuickSight user does not exist yet, register a new user
    if (!userExists) {

        try {
            await quicksight.registerUser({
                AwsAccountId: awsAccountId,
                Email: assumedRole.Subject,
                IdentityType: 'IAM',
                Namespace: 'default',
                UserRole: quicksightUserRole, // The QuickSight user role which we extracted from a custom attribute earlier
                IamArn: `arn:aws:iam::${awsAccountId}:role/${process.env.QUICKSIGHT_IAM_ROLE_NAME}`,
                SessionName: assumedRole.Subject
            }).promise();
        } catch (e) {
            console.error('QuickSight user registration failed.', e);
            return { statusCode: 500 };
        }

    }

    // Build a JSON-encoded string with credentials generated by the previous STS.AssumeRoleWithSAML() call
    const sessionParams = JSON.stringify({
        sessionId: assumedRole.Credentials.AccessKeyId,
        sessionKey: assumedRole.Credentials.SecretAccessKey,
        sessionToken: assumedRole.Credentials.SessionToken
    });

    const federationEndpoint = 'https://signin.aws.amazon.com/federation';

    // Request a sign-in token from the AWS federation endpoint using the JSON-encoded credentials
    // Further information:
    // https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html
    let tokenResponse = await axios.get(federationEndpoint, {
        params: {
            Action: 'getSigninToken',
            SessionDuration: 28800, // Session duration is 8 h
            Session: sessionParams
        }
    });

    let signInUrl;

    // Use the sign-in token from the previous request to build a sign-in URL for QuickSight
    if (tokenResponse) {
        signInUrl = axios.getUri({
            url: federationEndpoint,
            params: {
                Action: 'login',
                Issuer: 'accounts.google.com',
                Destination: 'https://quicksight.aws.amazon.com',
                SigninToken: tokenResponse.data.SigninToken
            }
        });
    }

    // Redirect user to the sign-in URL
    if (signInUrl) {
        return {
            statusCode: 302,
            headers: {
                Location: signInUrl
            }
        };
    } else {
        console.error('Sign-in URL could not be generated.');
        return { statusCode: 500 };
    }

};
